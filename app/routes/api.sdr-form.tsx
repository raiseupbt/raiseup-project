import type { ActionFunction } from '@remix-run/node';
import { json } from '@remix-run/node';
import { supabase } from '~/lib/supabase.server';

export const action: ActionFunction = async ({ request }) => {
  if (request.method !== 'POST') {
    return json({ error: 'M√©todo n√£o permitido' }, { status: 405 });
  }

  try {
    const dados = await request.json();
    console.log('üìù Dados recebidos:', JSON.stringify(dados, null, 2));
    
    // Extrair dados do formul√°rio
    const { dados_pessoais, etapa1, etapa2, etapa3, etapa4 } = dados;
    
    // Verificar se todos os dados obrigat√≥rios est√£o presentes
    if (!dados_pessoais?.nome || !dados_pessoais?.email) {
      console.error('‚ùå Dados pessoais incompletos:', dados_pessoais);
      return json({ error: 'Dados pessoais incompletos' }, { status: 400 });
    }
    
    // Verificar consentimento LGPD
    if (!etapa4?.lgpd_consent) {
      console.error('‚ùå Consentimento LGPD n√£o fornecido');
      return json({ error: '√â necess√°rio concordar com o armazenamento dos dados para prosseguir' }, { status: 400 });
    }
    
    // Criar objeto com todas as respostas
    const respostas = {
      etapa1,
      etapa2,
      etapa3,
      etapa4
    };
    
    console.log('üìä Respostas processadas:', JSON.stringify(respostas, null, 2));

    // Gerar resposta personalizada com OpenAI
    console.log('ü§ñ Gerando resposta IA...');
    let respostaIA;
    try {
      respostaIA = await gerarRecomendacaoIA(respostas);
      console.log('‚úÖ Resposta IA gerada, tamanho:', respostaIA.length);
    } catch (iaError: any) {
      console.error('‚ùå Erro na gera√ß√£o de IA:', iaError.message);
      return json({ 
        error: iaError.message || 'Erro no servi√ßo de IA. Tente novamente mais tarde.',
        errorType: 'ia_error'
      }, { status: 503 }); // Service Unavailable
    }

    // Preparar dados para inser√ß√£o
    const dadosParaInserir = {
      nome: dados_pessoais.nome,
      email: dados_pessoais.email,
      empresa: dados_pessoais.empresa || null,
      segmento: etapa1.segmento,
      porte_empresa: etapa1.porte_empresa,
      respostas: {
        ...respostas,
        lgpd_consent: etapa4.lgpd_consent // Store consent in respostas JSON
      },
      resposta_ia: respostaIA,
      endereco_ip: request.headers.get('x-forwarded-for') || 
                   request.headers.get('x-real-ip') || 
                   'unknown',
      navegador: request.headers.get('user-agent') || 'unknown'
    };
    
    console.log('üíæ Dados para inserir no Supabase:', JSON.stringify(dadosParaInserir, null, 2));

    // Salvar no Supabase
    console.log('üóÑÔ∏è Salvando no Supabase...');
    const { data, error } = await supabase
      .from('formularios_sdr')
      .insert(dadosParaInserir)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao salvar no Supabase:', error);
      console.error('‚ùå Detalhes do erro:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      return json({ error: `Erro ao salvar dados: ${error.message}` }, { status: 500 });
    }
    
    console.log('‚úÖ Dados salvos com sucesso:', data?.id);

    return json({ 
      success: true, 
      id: data.id,
      message: 'Formul√°rio processado com sucesso'
    });

  } catch (error) {
    console.error('Erro ao processar formul√°rio:', error);
    return json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
};

async function gerarRecomendacaoIA(respostas: any): Promise<string> {
  const prompt = construirPrompt(respostas);
  
  // Verificar se temos a chave da OpenAI configurada
  const openaiKey = process.env.OPENAI_API_KEY;
  
  if (!openaiKey) {
    console.error('‚ùå OPENAI_API_KEY n√£o configurada');
    throw new Error('Servi√ßo de IA temporariamente indispon√≠vel. Nossa equipe foi notificada e est√° trabalhando para resolver a quest√£o. Tente novamente em alguns minutos.');
  }

  try {
    console.log('ü§ñ Chamando OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um especialista em agentes SDR automatizados com IA para WhatsApp. Sua especialidade √© criar estrat√©gias de vendas que ser√£o implementadas em sistemas de automa√ß√£o conversacional. Com base nos dados do formul√°rio, gere uma an√°lise para implementa√ß√£o em agentes de IA:

CONTEXTO: Esta an√°lise ser√° usada para programar um agente SDR automatizado que atuar√° via WhatsApp, capaz de executar tanto estrat√©gias INBOUND (leads que chegam por interesse pr√≥prio) quanto OUTBOUND (prospec√ß√£o ativa).

INSTRU√á√ïES:
1. Analise o perfil e determine os 1-2 m√©todos de vendas mais adequados entre: SPIN Selling, AIDA, Challenger Sale, Solution Selling, Consultive Selling, Value Selling, BANT, Sandler, Strategic Selling, Facilita√ß√£o Pura

2. Justifique tecnicamente por que cada m√©todo √© ideal para automa√ß√£o de IA neste perfil espec√≠fico

3. Crie fluxos de conversa para AMBOS os cen√°rios:
   - INBOUND: Cliente interessado que fez contato (lead quente)
   - OUTBOUND: Prospec√ß√£o ativa (lead frio)

4. Defina padr√µes de automa√ß√£o: gatilhos, palavras-chave, momentos de escala√ß√£o para humano

5. Projete m√©tricas de automa√ß√£o e KPIs espec√≠ficos para agentes de IA

6. Sugira configura√ß√µes t√©cnicas para o agente automatizado

FORMATO DE RESPOSTA:
Use markdown com emojis, inclua scripts autom√°tiz√°veis, fluxogramas de decis√£o e exemplos de ambos cen√°rios (inbound/outbound). O relat√≥rio deve ter 900-1300 palavras focando na implementa√ß√£o pr√°tica em automa√ß√£o.

FOCO: Seja altamente espec√≠fico para automa√ß√£o de IA, incluindo triggers, respostas condicionais e escala√ß√£o inteligente. Cada recomenda√ß√£o deve ser implement√°vel em sistemas automatizados.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 2500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå OpenAI API error:', response.status, errorData);
      
      if (response.status === 429) {
        throw new Error('Nosso servi√ßo de IA est√° com muitas solicita√ß√µes no momento. Aguarde alguns minutos e tente novamente.');
      } else if (response.status === 401) {
        throw new Error('Erro de autentica√ß√£o com o servi√ßo de IA. Nossa equipe foi notificada.');
      } else if (response.status >= 500) {
        throw new Error('O servi√ßo de IA est√° temporariamente indispon√≠vel. Tente novamente em alguns minutos.');
      } else {
        throw new Error('Erro tempor√°rio no servi√ßo de IA. Tente novamente em alguns instantes.');
      }
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Resposta inv√°lida da OpenAI:', data);
      throw new Error('Resposta inv√°lida do servi√ßo de IA. Tente novamente.');
    }

    const content = data.choices[0].message.content;
    console.log('‚úÖ Resposta OpenAI recebida com sucesso');
    return content;

  } catch (error: any) {
    console.error('‚ùå Erro ao chamar OpenAI:', error);
    
    // Se √© um erro que j√° tem uma mensagem amig√°vel, usar ela
    if (error.message && error.message.includes('servi√ßo de IA')) {
      throw error;
    }
    
    // Para outros erros, usar mensagem gen√©rica
    throw new Error('Estamos enfrentando instabilidade em nosso servi√ßo de IA. Tente novamente em alguns minutos ou entre em contato conosco se o problema persistir.');
  }
}

function construirPrompt(respostas: any): string {
  const { etapa1, etapa2, etapa3, etapa4 } = respostas;
  
  return `DADOS DO CLIENTE:
- Segmento: ${etapa1.segmento}
- Porte: ${etapa1.porte_empresa}
- Valor m√©dio: ${etapa1.valor_medio}
- Comportamento do cliente: ${etapa2.perfil_cliente}
- Motiva√ß√£o principal: ${etapa2.motivacao_cliente}
- Processo de decis√£o: ${etapa2.processo_decisao}
- Maior desafio: ${etapa3.maior_desafio}
- Origem dos leads: ${etapa3.origem_clientes}
- Urg√™ncia: ${etapa3.urgencia_necessidade}
- Objetivo do SDR: ${etapa4.objetivo_sdr}
- Tom desejado: ${etapa4.tom_comunicacao}

Analise este perfil espec√≠fico e gere uma estrat√©gia completa de SDR para WhatsApp.`;
}


// N√£o exportar como default para evitar ser tratado como p√°gina
export default null;